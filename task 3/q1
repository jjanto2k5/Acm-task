# Node class for the doubly linked list
class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

# Doubly Linked List class
class DoublyLinkedList:
    def __init__(self):
        self.head = None

    # Insert at the beginning
    def insert_at_beginning(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node

    # Insert at the end
    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node
        new_node.prev = last_node

    # Insert at a specific position (0-based index)
    def insert_at_position(self, data, position):
        new_node = Node(data)
        if position == 0:
            self.insert_at_beginning(data)
            return
        current = self.head
        for i in range(position - 1):
            if current is None:
                raise IndexError("Position out of bounds")
            current = current.next
        if current is None:
            raise IndexError("Position out of bounds")
        new_node.next = current.next
        new_node.prev = current
        if current.next:
            current.next.prev = new_node
        current.next = new_node

    # Delete from the beginning
    def delete_from_beginning(self):
        if self.head is None:
            raise ValueError("List is empty")
        if self.head.next:
            self.head = self.head.next
            self.head.prev = None
        else:
            self.head = None

    # Delete from the end
    def delete_from_end(self):
        if self.head is None:
            raise ValueError("List is empty")
        if self.head.next is None:
            self.head = None
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.prev.next = None

    # Delete from a specific position (0-based index)
    def delete_from_position(self, position):
        if self.head is None:
            raise ValueError("List is empty")
        if position == 0:
            self.delete_from_beginning()
            return
        current = self.head
        for i in range(position):
            if current is None:
                raise IndexError("Position out of bounds")
            current = current.next
        if current is None:
            raise IndexError("Position out of bounds")
        if current.next:
            current.next.prev = current.prev
        if current.prev:
            current.prev.next = current.next

    # Traverse forward (left to right)
    def traverse_forward(self):
        if self.head is None:
            print("List is empty")
            return
        current = self.head
        while current:
            print(current.data, end=" ")
            current = current.next
        print()

    # Traverse backward (right to left)
    def traverse_backward(self):
        if self.head is None:
            print("List is empty")
            return
        current = self.head
        while current.next:
            current = current.next
        while current:
            print(current.data, end=" ")
            current = current.prev
        print()

# Example Usage
dll = DoublyLinkedList()
dll.insert_at_end(10)
dll.insert_at_end(20)
dll.insert_at_end(30)
dll.insert_at_beginning(5)
dll.insert_at_position(25, 3)
print("Forward Traversal:")
dll.traverse_forward()

print("Backward Traversal:")
dll.traverse_backward()

dll.delete_from_beginning()
print("After deleting from beginning:")
dll.traverse_forward()

dll.delete_from_end()
print("After deleting from end:")
dll.traverse_forward()

dll.delete_from_position(1)
print("After deleting from position 1:")
dll.traverse_forward()
